// FreeFem++ language basics

// FreeFem++ languange uses as C++-like syntax. For declaring new
// variables it should be straightforward for C++ users:
bool flag = false;
int i, j, k;
real a = 3.14, b = pi, c;
complex d;

// Standard I/O also uses bit-shift as C++ (without namespace): 
// cout << "Enter a value for c:" << endl;
// cin >> c;
// cout << "The value of c = " << c << endl;

// Both `cout` and `cerr` can be used:
cout << ">> a = " << a << endl;
cerr << ">> b = " << b << endl;

// Attribution of values works with `=` sign:
a = 1;
b = 2;
a = b;

i = 0;
j = 1;

// Basic output for numeric types:
cout << "\n--- Integer and real numbers ---" << endl;
cout << ">>       1+3 = " << 1+3 << " " << 1/3 << "\n";
cout << ">>  10^(+10) = " << 10^(+10) << "\n";
cout << ">>  10^(-10) = " << 10^(-10) << "\n";
cout << ">> 5-10^(-2) = " << 5 - 10^(-2) << " == 4.99\n";
cout << ">> 5+10^(-2) = " << 5 + 10^(-2) << " == 5.01\n";

// Basic output for complex numbers:
cout << "\n--- Complex numbers ---" << endl;
cout << ">> 10-10i = " << 10 - 10i << endl;
cout << ">>      d = " << d << endl;

// Setting number display precision:
int prec = cout.precision(12);
cout << "\nPrecision before calling cout.precision " << prec << endl;

// Basic output for scientific notation:
cout.scientific;
cout << "\n--- Scientific notation ---\n";
cout << ">> " << "-1^(1/3) = " << (-1+0i)^(1.0/3.0) << " (precision=12)\n";

// Fallback to previous precision and get fixed+showpos:
cout.precision(prec);
cout.fixed;
cout.showpos;
cout << "\n--- Fixed and showpos ---\n";
cout << "-1^(1/3) = " << (-1+0i)^(1./3.) << " (precision=" << prec << ")\n";

// ... deactivate showpos:
cout.noshowpos;
cout << "\n--- noshowpos ---\n";
cout << "8^(1/3)= " << (8)^(1./3.) << endl;
cout << "sqrt(-1) = " << sqrt(-1+0i) << endl;

// ... and reset cout to default:
d = 10 + 1i;
cout.default;
cout << "\n--- Default ---\n";
cout << "      d  = " << d << "\n"
     << " real(d) = " << real(d) << "\n"
     << " conj(d) = " << conj(d) << "\n"
     << "  arg(d) = " << arg(d)
     << endl;

// Increment/decrement operator:
cout << "\n--- Increment operator ---\n";
cout << ">> ++i = " << ++i << endl;
cout << ">>   i = " << i   << endl;
cout << ">> i++ = " << i++ << endl;
cout << ">>   i = " << i   << endl;
cout << ">> --j = " << --j << endl; // Seems to be a bug!
cout << ">>   j = " << j   << endl;
cout << ">> j-- = " << j-- << endl;
cout << ">>   j = " << j   << endl;

// String manipulations:
cout << "\n--- String concatenation ---\n";
string str0, str1;
str0 = "My name is";
str1 = "Walter";
str0 = str0 +  " " + str1;
str0 = str0 + " " + 2 ;
cout << ">> str0 = " << str0 << endl;

// Delimited scope:
{
    real a = 0;
    for (int i = 0; i < 10; i++) {
        a += i*i;
    }

    cout << ">> a = " << a << endl;
	
    // example of if arithmetic expression
	real aIsNull    = a == 0 ? a : -1;
	real aIsNotNull = a != 0 ? a : -1;
	cout << ">> a if a is 0     else -1 = " << aIsNull << endl;
	cout << ">> a if a is not 0 else -1 = " << aIsNotNull << endl;
 
    string ss = "\z\a\b\f\\--\\";
    cout << "\"" << ss << "\"" << endl;
}

